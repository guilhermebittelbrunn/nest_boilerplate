import Step from './step';

import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericErrors from '@/shared/core/logic/genericErrors';
import Guard from '@/shared/core/logic/guard';
import { PartialAutoGenerated } from '@/shared/types/common';

export interface IBoardProps extends PartialAutoGenerated {
  name: string;
  ownerId: UniqueEntityID;

  steps?: Step[];
}

export default class Board extends Entity<IBoardProps> {
  constructor(props: IBoardProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get name(): string {
    return this.props.name;
  }

  get ownerId(): UniqueEntityID {
    return this.props.ownerId;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deletedAt(): Date | undefined {
    return this.props.deletedAt;
  }

  get steps(): Step[] | undefined {
    return this.props.steps;
  }

  set steps(steps: Step[]) {
    this.props.steps = steps;
  }

  public static create(props: IBoardProps, id?: UniqueEntityID) {
    const guardedProps = Guard.againstNullOrUndefinedBulk([
      {
        argument: props.name,
        argumentName: 'nome do quadro',
      },
      {
        argument: props.ownerId,
        argumentName: 'id do propriet√°rio',
      },
    ]);

    if (!guardedProps.succeeded) {
      throw new GenericErrors.InvalidParam(guardedProps.message);
    }

    return new Board(props, id);
  }
}
