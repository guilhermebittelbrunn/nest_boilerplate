import TaskPriority from './taskPriority';

import User from '@/module/user/domain/user/user';
import Entity from '@/shared/core/domain/Entity';
import UniqueEntityID from '@/shared/core/domain/UniqueEntityID';
import GenericErrors from '@/shared/core/logic/genericErrors';
import Guard from '@/shared/core/logic/guard';
import { PartialAutoGenerated } from '@/shared/types/common';

export interface ITaskProps extends PartialAutoGenerated {
  title: string;
  stepId: UniqueEntityID;
  description?: string;
  assigneeId?: UniqueEntityID;
  dueDate?: Date;
  priority?: TaskPriority;

  assignee?: User;
}

export default class Task extends Entity<ITaskProps> {
  constructor(props: ITaskProps, id?: UniqueEntityID) {
    super(props, id);
  }

  get id(): UniqueEntityID {
    return this._id;
  }

  get stepId(): UniqueEntityID {
    return this.props.stepId;
  }

  get title(): string {
    return this.props.title;
  }

  get description(): string | undefined {
    return this.props.description;
  }

  get assigneeId(): UniqueEntityID | undefined {
    return this.props.assigneeId;
  }

  get dueDate(): Date | undefined {
    return this.props.dueDate;
  }

  get priority(): TaskPriority | undefined {
    return this.props.priority;
  }

  get createdAt(): Date {
    return this.props.createdAt;
  }

  get updatedAt(): Date {
    return this.props.updatedAt;
  }

  get deletedAt(): Date | undefined {
    return this.props.deletedAt;
  }

  get assignee(): User | undefined {
    return this.props.assignee;
  }

  public static create(props: ITaskProps, id?: UniqueEntityID) {
    const guardedProps = Guard.againstNullOrUndefinedBulk([
      {
        argument: props.title,
        argumentName: 't√≠tulo da tarefa',
      },
      {
        argument: props.stepId,
        argumentName: 'id da etapa',
      },
    ]);

    if (!guardedProps.succeeded) {
      throw new GenericErrors.InvalidParam(guardedProps.message);
    }

    return new Task(props, id);
  }
}
